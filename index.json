[{"content":"Some Context\u0026hellip; Github has deprecated using account passwords for authenticating Git operations on Github.com as written in this article. Now, if you\u0026rsquo;re like me and use the CLI often, you\u0026rsquo;d realise that using a PAT (personal access token) gets cumbersome real quick. So here\u0026rsquo;s a guide on how to use SSH keys for authenticating your Git operations to Github on the CLI.\nThis guide only covers the basic syntaxes and steps you need to do. Assuming that you could setup Git on your machine on your own or that you already have Git installed.\nConfiguring .gitconfig If you don\u0026rsquo;t already have your .gitconfig file configured, here are a few things that is marginal to be inside your .gitconfig and some other nice-to-haves.\nuser.name and user.email Your username and email should be inside your .gitconfig file. For context, the username can be different from your Github username, but the email should be the same. Since the email is going to be used to create the ssh-key later on.\n$ git config --global user.name \u0026#34;your username\u0026#34; $ git config --global user.email \u0026#34;your.mail@mail.com\u0026#34; init.defaultBranch After that, since Github changed the default branch name from master to main, you could also do that on your local machine with this command\n$ git config --global init.defaultBranch main Other Configurations The rest of the configuration you can look at the man page for git-config or check the online version here. Here\u0026rsquo;s the rest of my config in my machine\n$ git config --global core.editor nvim # main text editor $ git config --global color.ui auto\t# colorful git Configuring Local SSH Key After setting up the .gitconfig now We can continue to creating a local SSH-Key. Github uses the SSH key to authenticate any Git operations to your repository.\nBefore anything, start by checking your local machine for an existing Ed25519 algorithm SSH key. Type this command to the terminal and check the output\n$ cat ~/.ssh/id_ed25519.pub If an error message saying \u0026ldquo;No such file or directory\u0026rdquo;, that means there\u0026rsquo;s no existing Ed25519 SSH key on your machine. If no such message appears, then you can continue to the next step.\nCreating SSH Key To create an SSH key with the Ed25519 algorithm, run the following command\n$ ssh-keygen -t ed25519 -C \u0026#34;your.mail@mail.com\u0026#34; üí° The -C flag is to write a comment, otherwise the key will be generated with your computer‚Äôs username. The convention is to use your email as a comment to indicate who generated the public key.\nWhen a prompt appears asking you where to save the generated key, just press Enter.\nNext, it will ask you for a password; enter one if you wish, if not just press Enter\nLinking Local SSH Key with Github Now, We need to register our new SSH key with Github to enable passwordless authentication when accessing from the CLI.\nFirst, sign in into Github, and then click on your profile picture on the top right corner. Navigate to the Settings in the drop down menu.\nNext, on the left hand side, click SSH and GPG Keys. Then, click the green button on the top right corner that says New SSH Key. Give a distinct name to your key so that it is easy to remember. Leave this window open as you proceed to the next steps.\nNow, copy the existing SSH key on your local machine by running the following command\n$ cat ~/.ssh/id_ed25519.pub Highlight the output‚Äìwhich starts with ssh-ed25519 and ends with your email‚Äìand copy it to your clipboard.\nNow, go back to GitHub in your browser window and paste the key you copied into the key field. Keep the key type as Authentication Key and then, click Add SSH key. You‚Äôre done! You‚Äôve successfully added your SSH key!\nTesting Your Key To verify your SSH connection, you can follow this article from Github\n","permalink":"https://achrip.github.io/pages/how-to-setup-github-ssh/","summary":"A simple guide to setting up paswordless CLI Git operations when working with Github","title":"How to Setup Github SSH"},{"content":"Why Anaconda Anaconda is an open-source distribution of the programming language Python and R. The distribution comes with the Python interpreter and various packages related to machine learning and data science.\nBasically, Anaconda is a simple way for people who are interested in these fields to start learning without having to think about the complexity of setting up the environment. This is because Anaconda installs most, if not all, of the packages that are needed with a single installation\nAnaconda vs Miniconda By default, Anaconda installs all of the packages for you. If you feel that\u0026rsquo;s overkill, or perhaps you don\u0026rsquo;t want to sacrifice that much storage space, consider giving Miniconda a shot.\nMiniconda only installs the Python interpreter and the conda package manager. So you would have to manage the installed packages by yourself.\nStill don\u0026rsquo;t know what to install? Go with Anaconda\nInstalling Anaconda ‚ö†Ô∏è This guide is strictly for Windows only. I shall assume those who are on UNIX-Based distributions are smart and know how to navigate yourself throughout this guide\nEnsure winget is Installed Open Windows Powershell and run the command\nwinget --version If the output returns the version of winget installed on you machine, then continue to [1.2](## Installing Anaconda )\nIf the output return an error, follow this link to install winget on your machine.\nWhen installing winget fails, and you wouldn\u0026rsquo;t bother searching on how to install it, you can jump to [here](You can also try installing Anaconda or Miniconda from the official Anaconda website here. )\nInstalling Anaconda In Windows Powershell, run the following command\nwinget install -e -id Anaconda.Anaconda3 # OR winget install -e -id Anaconda.Miniconda3 You can also try installing Anaconda or Miniconda from the official Anaconda website here.\n‚ö†Ô∏è When installing Anaconda from the official website, the conda package manager can only be run via the Anaconda Command Prompt or Anaconda Powershell.\nVerify Anaconda Installation In Windows Powershell, run this command\nconda --version If the prompt returns the version of your conda, then you\u0026rsquo;re all set!\nSetting Up Virtual Environments What is a Virtual Environment? As I am not really the best person to explain this at the moment of this article written, I\u0026rsquo;d suggest reading this post. It covers what is a virtual environment and why do we need to use virtual environments on every python projects.\nCreating new Virtual Environments In Windows Powershell, run the command\nconda create -n \u0026lt;virtual env name\u0026gt; You can give the virtual environment any name, but be sure to not use whitespaces. Instead you can replace it with dashes (-) or underscores (_). And don\u0026rsquo;t forget to omit the \u0026lt; \u0026gt; .\nAlternatively, you can also install a specific Python Interpreter to the virtual environment by running the following command instead when creating a virtual environment\nconda create -n \u0026lt;virtual env name\u0026gt; python=x.x.x` Replace x.x.x. with the Python Interpreter version of your choice.\nThen follow any prompts conda gives you.\nInstalling Libraries in the Virtual Environment To view all of the virtual environments listed on your local machine, you can run the following command on Windows Powershell\nconda env list Activating a virtual environment is as easy as running the command below on Windows Powershell\nconda activate \u0026lt;virtual env name\u0026gt; After activating the virtual environment, you could install any required libraries using pip with the command\npip install \u0026lt;library name\u0026gt; Alternatively, you could also define a .txt file that consists of required libraries for your virtual environment somewhere in your machine. Installing those packages would be as simple as running\npip install -r \u0026lt;/path/to/your/requirements.txt\u0026gt; If all goes well, you\u0026rsquo;re done! You can use the virtual environment with any code editor of your choice!\nüí° You only need to access the virtual environment via the terminal like this only when you\u0026rsquo;re setting up the virtual environment for the first time. With the exception that you prefer using Jupyter rather than the mainstream code editors.\nAfterword Advice for The Brave This is a personal hot take; sticking with Anaconda won\u0026rsquo;t broaden your horizon. To the brave souls who are reading this article, I could advise you to try other methods (or at least consider trying). Because there\u0026rsquo;s a whole new world out there that may or may not benefit you in a way.\nHere are some open-source projects that could serve as a good starting point:\nFor WSL and UNIX-based OS users:\npyenv\npyenv-virtualenvwrapper\nhygeia\nuv\nFor Windows Users:\nhygeia\nuv\n","permalink":"https://achrip.github.io/pages/setting-up-python-with-anaconda3-for-machine-learning/","summary":"Step-by-Step guide to setting up your python environment for machine learning and data science","title":"Setting up Python with Anaconda3 for Machine Learning"}]